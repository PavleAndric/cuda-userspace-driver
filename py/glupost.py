import codecs
import re
import struct

gas = [0x200000,0x200000,0x200000,0x200000,0x200000,0x200000,0x200000,0x200000,0x200000,0x600000,0x200000,0x200000,0x1a00000,0x200000] 
gas_2 = [0x3800000,0x1000,0x200000,0x200000,0x1000,0x1000,0x1000,0x1000,0x1000,0x1000,0x1000,0x1000,0x1000,0x1000,0x1000,0x1000,0x1000,0x1000,0x1000,0x1000,0x1000,0x1000,0x1000,0x200000,0x200000,0x200000,0x200000,0x200000,0x177000]
lmao_1 = sum(gas)
lmao_2 = sum(gas_2)

# moje

k = ["00000000", "02054080", "00000000", "00000000", 
"00000000", "00000000", "0000047f", "3c000000", 
"00000000", "00000000", "ffcfe3b3", "00000000", 
"00000000", "44010000", "00000001", "00000001", 
"00000001", "00000000", "00000000", "22240000", 
"000a0023", "00010001", "00121083", "00000000", 
"00000000", "05607f7c", "80000002", "00000006", 
"00000000", "00000000", "00000000", "08000000", 
"00000640", "7200127f", "ce220000", "0c4c7fff", 
"ce010000", "04107fff", "00000000", "00000000", 
"00000000", "00000000", "00000000", "00000000", 
"00000000", "00000000", "00000000", "00000000", 
"ce000000", "80007fff", "cfe3b300", "00007fff", 
"00000000", "00000000", "00000000", "00000000", 
"00000000", "00000000", "00000000", "00000000", 
"00000000", "00000000", "00000000", "00000000", 
"00000000", "00000000"]



k_1 = ["00000000", "02054080", "00000000", "00000000",
"00000000", "00000000", "0000047f", "3c000000",
"00000000", "00000000", "ffcfe3b3", "00000000",
"00000000", "44010000", "00000001", "00000001",
"00000001", "00000000", "00000000", "22240000",
"000a0023", "00010001", "00121083", "00000000",
"00000000", "05607f7c", "80000002", "00000006",
"00000000", "00000000", "00000000", "08000000",
"00000640", "7300127f", "ce220000", "0c4c7fff",
"ce010000", "04107fff", "00000000", "00000000",
"00000000", "00000000", "00000000", "00000000",
"00000000", "00000000", "00000000", "00000000",
"ce000000", "80007fff", "cfe3b300", "00007fff",
"00000000", "00000000", "00000000", "00000000",
"00000000", "00000000", "00000000", "00000000",
"00000000", "00000000", "00000000", "00000000",
"00000000", "00000000"]


# MOJE
k= ["0000000a", "00000001", "00000001", "00000001", 
"00000001", "00000001", "ed000000", "00007fff", 
"eb000000", "00007fff", "00fffdc0", "00000000", 
"00000001", "00000000", "05408000", "00000002", 
"ce220000", "00007fff", "ce010000", "00007fff", 
"00000000", "00000000", "00000000", "00000000", 
"00000000", "00000000", "00000000", "00000000", 
"00000000", "00000000", "00000000", "00000000", 
"00000000", "00000000", "02ee2efe", "00000000", 
"00000000", "00000000", "00000000", "00000000", 
"00000001", "00000000", "00000000", "00000000", 
"00000000", "00000000", "00000000", "00000000", 
"00000000", "00000000", "00000000", "00000000", 
"00000000", "00000000", "00000000", "00000000", 
"00000000", "00000000", "00000000", "00000000", 
"00000000", "00000000", "00000000", "00000000", 
"00000000", "00000000", "00000000", "00000010", 
"00000000", "00000178", "00000000", "00000000", 
"00000000", "00000000", "05800000", "00000002", 
"cfe3b300", "00007fff", "00000000", "00000000", 
"00000000", "00000000", "00000000", "00000000", 
"00000000", "00000000", "00000000", "00000000"]


k_1 = ["0000000a", '00000001', "00000001", "00000001", 
"00000001", '00000001', "ed000000", "00007fff", 
"eb000000", '00007fff', "00fffdc0", "00000000", 
"00000001", '00000000', "05408000", "00000002", 
"ce220000", '00007fff', "ce010000", "00007fff",  
"00000000", '00000000', "00000000", "00000000", 
"00000000", '00000000', "00000000", "00000000", 
"00000000", '00000000', "00000000", "00000000", 
"00000000", '00000000', "02ee2efe", "00000000", 
"00000000", '00000000', "00000000", "00000000", 
"00000001", '00000000', "00000000", "00000000", 
"00000000", '00000000', "00000000", "00000000", 
"00000000", '00000000', "00000000", "00000000", 
"00000000", '00000000', "00000000", "00000000", 
"00000000", '00000000', "00000000", "00000000", 
"00000000", '00000000', "00000000", "00000000", 
"00000000", '00000000', "00000000", "00000010", 
"00000000", '00000178', "00000000", "00000000", 
"00000000", '00000000', "05800000", "00000002", 
"cfe3b300", '00007fff', "00000000", "00000000", 
"00000000", '00000000', "00000000", "00000000", 
"00000000", '00000000', "00000000", "00000000"]



for x ,y in zip(k , k_1):
  if (gas := not x == y):
    print(gas , x , y )







exit(1)


desired_value = 0x7300127f
packed_bytes = struct.pack('<Q', desired_value)
unpacked_hex = codecs.encode(packed_bytes, 'hex')[::-1].decode().upper()
result = "0x" + unpacked_hex
print(result) # Output: 0x7300127F 0x00000000370021F7


command_bufer = [x[i+1] + x[i] for i in  range(0, len(x) , 2)]
SASS = ["00000a0000017a02","000fc40000000f00","0000000000067919","000e220000002500","0000000400077802","000fc60000000f00","0000000000037919","000e240000002100","0000000006067a24","001fc800078e0203","0000580006027625","000fc800078e0207","00005a0006047625","000fc800078e0207","0000000002027381","000ea800001ee900","0000000004057381","000ea200001ee900","00005c0006067625","000fe200078e0207","0000000502097210","004fd00007ffe0ff","0000000906007386","000fe2000010e900","000000000000794d","000fea0003800000","fffffff000007947","000fc0000383ffff","0000000000007918","000fc00000000000","0000000000007918"]
for x ,y in zip(SASS,command_bufer): print(f"cm ={y}  sass = {x}")

print(len(SASS))
def go():
  
  pat_0 = r"MW\((\d+):(\d+)\)"
  pat_1 = r"MW\(\((\d+)\+\(i\)\*64\):\((\d+)\+\(i\)\*64\)\)"
  get_cmd = lambda x: x.split("MW")[0].replace("define", "").replace(" ", "")
  f =  [x for x in open("../QMD.c",  "r").read().split("\n") if "MW" in x][1:]

  c_to_num = {}
  for x in f:
    cmd = get_cmd(x)
    if match := re.search(pat_0, x):
      c_to_num[cmd] = [int(match.group(2)) , int(match.group(1))]; continue
    if match := re.search(pat_1, x):
      c_to_num[cmd] = [int(match.group(2)) , int(match.group(1))]

  return c_to_num , {tuple(v):k for k,v in c_to_num.items()}

c_to_num ,num_to_c = go()
QMD =["00000000", "02054080", "00000000", "00000000",
"00000000", "00000000", "0000047f", "3c000000", 
"00000000", "00000000", "ffcfe3b3", "00000000", 
"00000000", "44010000", "00000001", "00000001", 
"00000001", "00000000", "00000000", "22240000", 
"00200023", "00010001", "00121083", "00000000", 
"00000000", "05607f7c", "80000002", "00000006", 
"00000000", "00000000", "00000000", "08000000", 
"00000640", "7300127f", "ce220000", "0c4c7fff", 
"ce010000", "04107fff", "00000000", "00000000", 
"00000000", "00000000", "00000000", "00000000", 
"00000000", "00000000", "00000000", "00000000", 
"ce000000", "80007fff", "cfe3b300", "00007fff", 
"00000000", "00000000", "00000000", "00000000", 
"00000000", "00000000", "00000000", "00000000", 
"00000000", "00000000", "00000000", "00000000",
"00000000", "00000000"]

# 00000000 8 * 4 = 32 

def ide_gas(q):
  bits = 0  
  gas = q[2:]
  for i in range(len(gas)):
    if i % 4 ==0: print("\t")
    old_bits = bits
    bits += 32
    print(f"{old_bits:04}-{bits:04}  {gas[i]}", end="  ")
  print() 
ide_gas(QMD)


# NVC5C0_QMDV02_03_PROGRAM_PREFETCH_ADDR_LOWER_SHIFTED       MW(287:256) #0256-0288  ffcfe3b3 ffcfe3b3 shifted  7fffcfe3b300 , ovo je siftovao
# hex((0x7fffcfe3b300 >> 8 ) & 0xFFFFFFFF)

 
# 0352-0384  44010000
#define NVC5C0_QMDV02_03_CWD_REFERENCE_COUNT_ID                    MW(357:352) ovo je 4
#define NVC5C0_QMDV02_03_CWD_REFERENCE_COUNT_DELTA_MINUS_ONE       MW(365:358) ovo je 40 
#define NVC5C0_QMDV02_03_RELEASE_MEMBAR_TYPE                       MW(366:366) ovo je 1
 

#define NVC5C0_QMDV02_03_CTA_RASTER_WIDTH                          MW(415:384) 00000001
# 0384-0416 kec
 
#define NVC5C0_QMDV02_03_CTA_RASTER_HEIGHT                         MW(431:416)
#define NVC5C0_QMDV02_03_CTA_RASTER_DEPTH                          MW(463:448)
 
 
 
#define NVC5C0_QMDV02_03_SHARED_MEMORY_SIZE                        MW(561:544) 16 bita 2224
#0544-0576  22240000

#0576-0608  00200023
#define NVC5C0_QMDV02_03_QMD_RESERVED_H                            MW(591:584)  20
#define NVC5C0_QMDV02_03_CTA_THREAD_DIMENSION0                     MW(607:592) 0023 ?
#define NVC5C0_QMDV02_03_CTA_THREAD_DIMENSION1                     MW(623:608) 0001   0608-0640  00010001 
#define NVC5C0_QMDV02_03_CTA_THREAD_DIMENSION2                     MW(639:624) 0001   0608-0640  00010001 
 


#define NVC5C0_QMDV02_03_RELEASE0_ADDRESS_LOWER                    MW(767:736)  05607f7c cudno  0x7f7c05600800  ?? # release adress >
# 0768-0800  80000002
#define NVC5C0_QMDV02_03_RELEASE0_ADDRESS_UPPER                    MW(775:768)   80

#define NVC5C0_QMDV02_03_RELEASE0_PAYLOAD                          MW(831:800) 00000006


# 0928-0960  08000000
#define NVC5C0_QMDV02_03_SHADER_LOCAL_MEMORY_LOW_SIZE              MW(951:928) 080000 volko

# 0x80000006 ????????

# 0960-0992  00000640 
#define NVC5C0_QMDV02_03_SHADER_LOCAL_MEMORY_HIGH_SIZE             MW(983:960) 000006
#define NVC5C0_QMDV02_03_REGISTER_COUNT                            MW(991:984) 40



# 0992-1024  7300127f ??  OOVOVOVVOVO
#define NVC5C0_QMDV02_03_PROGRAM_PREFETCH_ADDR_UPPER_SHIFTED       MW(1000:992) 73 ??? shifted ne znam
#define NVC5C0_QMDV02_03_PROGRAM_PREFETCH_SIZE                     MW(1009:1001) 00 
#define NVC5C0_QMDV02_03_QMD_RESERVED_A                            MW(1015:1010) 1
#define NVC5C0_QMDV02_03_SASS_VERSION                              MW(1023:1016) 27



# 1024-1056  ce220000  1056-1088  0c4c7fff  1088-1120  ce010000  1120-1152  04107fff
# i ovde igra ulogu ! , imas  2 tako  da se posle  mnozi  sa  1 tj dodaje  se 64

#1056-1088  0c4c7fff
                                  
#define NVC5C0_QMDV02_03_CONSTANT_BUFFER_ADDR_LOWER(i)             MW((1055+(i)*64):(1024+(i)*64))  1024-1056  ce220000
#define NVC5C0_QMDV02_03_CONSTANT_BUFFER_ADDR_UPPER(i)             MW((1072+(i)*64):(1056+(i)*64))  1056-1088  0c4c     7fff
#define NVC5C0_QMDV02_03_CONSTANT_BUFFER_RESERVED_ADDR(i)          MW((1073+(i)*64):(1073+(i)*64))  ? 7 
#define NVC5C0_QMDV02_03_CONSTANT_BUFFER_INVALIDATE(i)             MW((1074+(i)*64):(1074+(i)*64))  ? f 
#define NVC5C0_QMDV02_03_CONSTANT_BUFFER_SIZE_SHIFTED4(i)          MW((1087+(i)*64):(1075+(i)*64))  ?? 7ff  , lmao shifted  , shift za 4


""" 
NVC5C0_QMDV02_03_CONSTANT_BUFFER_ADDR_LOWER              1024-1056  ce220000
NVC5C0_QMDV02_03_CONSTANT_BUFFER_ADDR_UPPER              1056-1072  7fff -> 7fffce220000

0c4c
NVC5C0_QMDV02_03_CONSTANT_BUFFER_RESERVED_ADDR           1073-1073  0
NVC5C0_QMDV02_03_CONSTANT_BUFFER_INVALIDATE(i)           1074-1074  0
NVC5C0_QMDV02_03_CONSTANT_BUFFER_SIZE_SHIFTED4(i)        1087-1075  c4c

c4c
410
000
"""

 
""" proba """
#1056-1088 bin_endian fff7c4c0    
#define NVC5C0_QMDV02_03_CONSTANT_BUFFER_ADDR_UPPER(i)             MW((1072+(i)*64):(1056+(i)*64))  7fff
#define NVC5C0_QMDV02_03_CONSTANT_BUFFER_RESERVED_ADDR(i)          MW((1073+(i)*64):(1073+(i)*64))  1    0xc = 1100 bin    0 i bit 1 su 11
#define NVC5C0_QMDV02_03_CONSTANT_BUFFER_INVALIDATE(i)             MW((1074+(i)*64):(1074+(i)*64))  1
#define NVC5C0_QMDV02_03_CONSTANT_BUFFER_SIZE_SHIFTED4(i)          MW((1087+(i)*64):(1075+(i)*64))  ?? 4c0 10011000000


#1088-1120  ce010000  1120-1152  04107fff
#define NVC5C0_QMDV02_03_CONSTANT_BUFFER_ADDR_LOWER(i)             1119 1088 ce010000
#define NVC5C0_QMDV02_03_CONSTANT_BUFFER_ADDR_UPPER(i)             1136 1120 0410 7fff
#define NVC5C0_QMDV02_03_CONSTANT_BUFFER_RESERVED_ADDR(i)          1137 1137 7 
#define NVC5C0_QMDV02_03_CONSTANT_BUFFER_INVALIDATE(i)             1138 1138 f 
#define NVC5C0_QMDV02_03_CONSTANT_BUFFER_SIZE_SHIFTED4(i)          1151 1139 7ff ??

#1472-1504  ce000000  1504-1536  80007fff
# isto i ovde

# 1536-1568  cfe3b300  1568-1600  00007fff
#define NVC5C0_QMDV02_03_PROGRAM_ADDRESS_LOWER                     MW(1567:1536) cfe3b300    
#define NVC5C0_QMDV02_03_PROGRAM_ADDRESS_UPPER                     MW(1584:1568) 7fff , znaci ovo je drugi endian



#  00007fff is little-endian.
#  7fff0000 is big-endian.



#define NVC5C0_QMDV02_03_PROGRAM_PREFETCH_ADDR_LOWER_SHIFTED       MW(287:256)



"""
for i, y in enumerate(kernel): 
  if i % 4 == 0: print()
  print(f"0x{y},", end = " ") 
print()
exit(1)

for i, y in enumerate(x): 
  if i % 4 == 0: print()
  print(f"0x{y},", end = " ") 
print()

print(len(gas))
for i, y in enumerate(gas): 
  if i % 4 == 0: print()
  print(f"0x{y},", end = " ") 
print()
"""