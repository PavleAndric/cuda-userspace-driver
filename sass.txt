
	code for sm_52
		Function : kernel
	.headerflags    @"EF_CUDA_SM52 EF_CUDA_PTX_SM(EF_CUDA_SM52)"
                                                                                 /* 0x001cfc00e22007f6 */
        /*0008*/                   MOV R1, c[0x0][0x20] ;                        /* 0x4c98078000870001 */
        /*0010*/                   S2R R0, SR_CTAID.X ;                          /* 0xf0c8000002570000 */
        /*0018*/                   S2R R2, SR_TID.X ;                            /* 0xf0c8000002170002 */
                                                                                 /* 0x001fd842fec20ff1 */
        /*0028*/                   XMAD.MRG R3, R0.reuse, c[0x0] [0x8].H1, RZ ;  /* 0x4f107f8000270003 */
        /*0030*/                   XMAD R2, R0.reuse, c[0x0] [0x8], R2 ;         /* 0x4e00010000270002 */
        /*0038*/                   XMAD.PSL.CBCC R0, R0.H1, R3.H1, R2 ;          /* 0x5b30011800370000 */
                                                                                 /* 0x081fd800fca207f1 */
        /*0048*/                   SHL R6, R0.reuse, 0x2 ;                       /* 0x3848000000270006 */
        /*0050*/                   SHR R0, R0, 0x1e ;                            /* 0x3829000001e70000 */
        /*0058*/                   IADD R2.CC, R6.reuse, c[0x0][0x140] ;         /* 0x4c10800005070602 */
                                                                                 /* 0x001fd840fe0207f2 */
        /*0068*/                   IADD.X R3, R0.reuse, c[0x0][0x144] ;          /* 0x4c10080005170003 */
        /*0070*/         {         IADD R4.CC, R6.reuse, c[0x0][0x148] ;         /* 0x4c10800005270604 */
        /*0078*/                   LDG.E R2, [R2]         }
                                                                                 /* 0xeed4200000070202 */
                                                                                 /* 0x001f9800f62007f2 */
        /*0088*/                   IADD.X R5, R0, c[0x0][0x14c] ;                /* 0x4c10080005370005 */
        /*0090*/                   LDG.E R4, [R4] ;                              /* 0xeed4200000070404 */
        /*0098*/                   IADD R6.CC, R6, c[0x0][0x150] ;               /* 0x4c10800005470606 */
                                                                                 /* 0x001fc420fe4007f7 */
        /*00a8*/                   IADD.X R7, R0, c[0x0][0x154] ;                /* 0x4c10080005570007 */
        /*00b0*/                   IADD R0, R2, R4 ;                             /* 0x5c10000000470200 */
        /*00b8*/                   STG.E [R6], R0 ;                              /* 0xeedc200000070600 */
                                                                                 /* 0x001f8000ffe007ff */
        /*00c8*/                   EXIT ;                                        /* 0xe30000000007000f */
        /*00d0*/                   BRA 0xd0 ;                                    /* 0xe2400fffff87000f */
        /*00d8*/                   NOP;                                          /* 0x50b0000000070f00 */
                                                                                 /* 0x001f8000fc0007e0 */
        /*00e8*/                   NOP;                                          /* 0x50b0000000070f00 */
        /*00f0*/                   NOP;                                          /* 0x50b0000000070f00 */
        /*00f8*/                   NOP;                                          /* 0x50b0000000070f00 */



add.s64 	%rd10, %rd4, %rd7;

    Function : kernel
.headerflags    @"EF_CUDA_SM52 EF_CUDA_PTX_SM(EF_CUDA_SM52)"
/* Instructions */
/* .0x001cfc00e22007f6 */
    // Load kernel parameters into registers
    /*0008*/                   MOV R1, c[0x0][0x20] ;                        // Load kernel parameter 0 into register R1
    /*0010*/                   S2R R0, SR_CTAID.X ;                          // Move the block ID in the x-dimension to register R0
    /*0018*/                   S2R R2, SR_TID.X ;                            // Move the thread ID in the x-dimension to register R2
/* .0x001fd842fec20ff1 */
    // Calculate thread and block information
    /*0028*/                   XMAD.MRG R3, R0.reuse, c[0x0] [0x8].H1, RZ ;  // Multiply-add operation with mixed data types. Multiply the block ID with a constant and add the result to a register. The result is stored in register R3.
    /*0030*/                   XMAD R2, R0.reuse, c[0x0] [0x8], R2 ;         // Multiply-add operation. Multiply the block ID with a constant and add the result to a register. The result is stored in register R2.
    /*0038*/                   XMAD.PSL.CBCC R0, R0.H1, R3.H1, R2 ;          // Predicated mixed multiply-add operation with carry/borrow and conditional execution. Multiply the block ID with a constant and add the result to a register. The result is stored in register R0.
/* .0x081fd800fca207f1 */
    // Calculate global memory addresses
    /*0048*/                   SHL R6, R0.reuse, 0x2 ;                       // Shift left operation. Shift the value in register R0 left by 2 bits and store the result in register R6.
    /*0050*/                   SHR R0, R0, 0x1e ;                            // Shift right operation. Shift the value in register R0 right by 30 bits and store the result in register R0.
    /*0058*/                   IADD R2.CC, R6.reuse, c[0x0][0x140] ;         // Integer add with carry-in. Add the value in register R6 with a constant from constant memory and store the result in register R2 with carry.
/* .0x001fd840fe0207f2 */
    // Load values from global memory
    /*0068*/                   IADD.X R3, R0.reuse, c[0x0][0x144] ;          // Integer add with extended precision. Add the value in register R0 with a constant from constant memory and store the result in register R3.
    /*0070*/         {         IADD R4.CC, R6.reuse, c[0x0][0x148] ;         // Integer add with carry-in. Add the value in register R6 with a constant from constant memory and store the result in register R4 with carry.
    /*0078*/                   LDG.E R2, [R2]         }                      // Load global memory element. Load the value from global memory using the address stored in register R2 and store the result in register R2.
/* .0xeed4200000070202 */
/* .0x001f9800f62007f2 */
    // Compute addition
    /*0088*/                   IADD.X R5, R0, c[0x0][0x14c] ;                // Integer add with extended precision. Add the value in register R0 with a constant from constant memory and store the result in register R5.
    /*0090*/                   LDG.E R4, [R4] ;                              // Load global memory element. Load the value from global memory using the address stored in register R4 and store the result in register R4.
    /*0098*/                   IADD R6.CC, R6, c[0x0][0x150] ;               // Integer add with carry-in. Add the value in register R6 with a constant from constant memory and store the result in register R6 with carry.
/* .0x001fc420fe4007f7 */
    // Calculate destination global memory address
    /*00a8*/                   IADD.X R7, R0, c[0x0][0x154] ;                // Integer add with extended precision. Add the value in register R0 with a constant from constant memory and store the result in register R7.
    /*00b0*/                   IADD R0, R2, R4 ;                             // Integer add operation. Add the values in registers R2 and R4 and store the result in register R0. #cini se da je ovo bitna komputacija
    /*00b8*/                   STG.E [R6], R0 ;                              // Store global memory element. Store the value from register R0 into global memory using the address stored in register R6.
/* .0x001f8000ffe007ff */
    // Return from the kernel
    /*00c8*/                   EXIT ;                                        // Exit the kernel
    /*00d0*/                   BRA 0xd0 ;                                    // Branch to the specified instruction address.
    /*00d8*/                   NOP;                                          // No operation.
/* .0x001f8000fc0007e0 */
    /*00e8*/                   NOP;                                          // No operation.
    /*00f0*/                   NOP;                                          // No operation.
    /*00f8*/                   NOP;                                          // No operation.
